/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -N -m -p nm-vpn-plugininterface /space/kde/sources/trunk/KDE/kdebase/workspace/solid/networkmanager-0.7/dbus/introspection/nm-vpn-plugin.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef NM_VPN_PLUGININTERFACE_H_1205050592
#define NM_VPN_PLUGININTERFACE_H_1205050592

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*HAND-EDIT*/
#include "generic-types.h"

/*
 * Proxy class for interface org.freedesktop.NetworkManager.VPN.Plugin
 */
class OrgFreedesktopNetworkManagerVPNPluginInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.NetworkManager.VPN.Plugin"; }

public:
    OrgFreedesktopNetworkManagerVPNPluginInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopNetworkManagerVPNPluginInterface();

    Q_PROPERTY(uint State READ state)
    inline uint state() const
    { return qvariant_cast< uint >(internalPropGet("State")); }

public Q_SLOTS: // METHODS
    inline QDBusReply<void> Connect(const QVariantMapMap &connection)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(connection);
        return callWithArgumentList(QDBus::Block, QLatin1String("Connect"), argumentList);
    }

    inline QDBusReply<void> Disconnect()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("Disconnect"), argumentList);
    }

    inline QDBusReply<QString> NeedSecrets(const QVariantMapMap &settings)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(settings);
        return callWithArgumentList(QDBus::Block, QLatin1String("NeedSecrets"), argumentList);
    }

    inline QDBusReply<void> SetFailure(const QString &reason)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(reason);
        return callWithArgumentList(QDBus::Block, QLatin1String("SetFailure"), argumentList);
    }

    inline QDBusReply<void> SetIp4Config(const QVariantMap &config)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(config);
        return callWithArgumentList(QDBus::Block, QLatin1String("SetIp4Config"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Failure(uint reason);
    void Ip4Config(const QVariantMap &ip4config);
    void LoginBanner(const QString &banner);
    void StateChanged(uint state);
};

#endif
